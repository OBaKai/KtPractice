# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callCompaion

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1.241 ms/op
# Warmup Iteration   2: 0.498 ms/op
# Warmup Iteration   3: 0.442 ms/op
# Warmup Iteration   4: 0.440 ms/op
# Warmup Iteration   5: 0.449 ms/op
Iteration   1: 0.525 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.439 ms/op
Iteration   4: 0.446 ms/op
Iteration   5: 0.496 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callCompaion":
  0.470 ±(99.9%) 0.149 ms/op [Average]
  (min, avg, max) = (0.439, 0.470, 0.525), stdev = 0.039
  CI (99.9%): [0.321, 0.619] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.createSingleInstance

# Run progress: 25.00% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.261 ms/op
# Warmup Iteration   2: 0.851 ms/op
# Warmup Iteration   3: 0.833 ms/op
# Warmup Iteration   4: 0.830 ms/op
# Warmup Iteration   5: 0.832 ms/op
Iteration   1: 0.832 ms/op
Iteration   2: 0.832 ms/op
Iteration   3: 0.832 ms/op
Iteration   4: 0.833 ms/op
Iteration   5: 0.870 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.createSingleInstance":
  0.840 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.832, 0.840, 0.870), stdev = 0.017
  CI (99.9%): [0.775, 0.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callReflectCompaionAccessibleTrue

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.894 ms/op
# Warmup Iteration   2: 0.700 ms/op
# Warmup Iteration   3: 0.697 ms/op
# Warmup Iteration   4: 0.696 ms/op
# Warmup Iteration   5: 0.698 ms/op
Iteration   1: 0.709 ms/op
Iteration   2: 0.697 ms/op
Iteration   3: 0.696 ms/op
Iteration   4: 0.696 ms/op
Iteration   5: 0.711 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callReflectCompaionAccessibleTrue":
  0.702 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.696, 0.702, 0.711), stdev = 0.007
  CI (99.9%): [0.673, 0.730] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.createReflectCompaion

# Run progress: 75.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 8.451 ms/op
# Warmup Iteration   2: 4.980 ms/op
# Warmup Iteration   3: 4.859 ms/op
# Warmup Iteration   4: 4.874 ms/op
# Warmup Iteration   5: 4.903 ms/op
Iteration   1: 4.920 ms/op
Iteration   2: 4.932 ms/op
Iteration   3: 5.449 ms/op
Iteration   4: 6.300 ms/op
Iteration   5: 6.702 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.createReflectCompaion":
  5.661 ±(99.9%) 3.114 ms/op [Average]
  (min, avg, max) = (4.920, 5.661, 6.702), stdev = 0.809
  CI (99.9%): [2.546, 8.775] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt  Score   Error  Units
ReflectBenchmark.callCompaion                        avgt    5  0.470 ± 0.149  ms/op
ReflectBenchmark.callReflectCompaionAccessibleFalse  avgt    5  0.840 ± 0.065  ms/op
ReflectBenchmark.callReflectCompaionAccessibleTrue   avgt    5  0.702 ± 0.028  ms/op
ReflectBenchmark.createReflectCompaion               avgt    5  5.661 ± 3.114  ms/op

Benchmark result is saved to benchmark_reflect1651648909731.json
