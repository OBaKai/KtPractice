# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callMethod

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.764 ms/op
# Warmup Iteration   2: 0.445 ms/op
# Warmup Iteration   3: 0.426 ms/op
# Warmup Iteration   4: 0.443 ms/op
# Warmup Iteration   5: 0.435 ms/op
Iteration   1: 0.428 ms/op
Iteration   2: 0.420 ms/op
Iteration   3: 0.419 ms/op
Iteration   4: 0.420 ms/op
Iteration   5: 0.426 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callMethod":
  0.422 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.419, 0.422, 0.428), stdev = 0.004
  CI (99.9%): [0.407, 0.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callReflectMethod

# Run progress: 25.00% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 17.132 ms/op
# Warmup Iteration   2: 11.621 ms/op
# Warmup Iteration   3: 10.610 ms/op
# Warmup Iteration   4: 10.255 ms/op
# Warmup Iteration   5: 10.294 ms/op
Iteration   1: 10.357 ms/op
Iteration   2: 10.404 ms/op
Iteration   3: 10.434 ms/op
Iteration   4: 10.754 ms/op
Iteration   5: 10.715 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callReflectMethod":
  10.533 ±(99.9%) 0.719 ms/op [Average]
  (min, avg, max) = (10.357, 10.533, 10.754), stdev = 0.187
  CI (99.9%): [9.814, 11.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callReflectMethodAccessiblFalse

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 1.135 ms/op
# Warmup Iteration   2: 0.869 ms/op
# Warmup Iteration   3: 0.853 ms/op
# Warmup Iteration   4: 0.881 ms/op
# Warmup Iteration   5: 0.871 ms/op
Iteration   1: 0.845 ms/op
Iteration   2: 0.841 ms/op
Iteration   3: 0.840 ms/op
Iteration   4: 0.840 ms/op
Iteration   5: 0.853 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callReflectMethodAccessiblFalse":
  0.844 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.840, 0.844, 0.853), stdev = 0.005
  CI (99.9%): [0.823, 0.865] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/bin/java
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.hi.dhl.demo.ReflectBenchmark.callReflectMethodAccessiblTrue

# Run progress: 75.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.849 ms/op
# Warmup Iteration   2: 0.658 ms/op
# Warmup Iteration   3: 0.657 ms/op
# Warmup Iteration   4: 0.657 ms/op
# Warmup Iteration   5: 0.669 ms/op
Iteration   1: 0.692 ms/op
Iteration   2: 0.687 ms/op
Iteration   3: 0.688 ms/op
Iteration   4: 0.690 ms/op
Iteration   5: 0.677 ms/op


Result "com.hi.dhl.demo.ReflectBenchmark.callReflectMethodAccessiblTrue":
  0.687 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.677, 0.687, 0.692), stdev = 0.006
  CI (99.9%): [0.664, 0.710] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt   Score   Error  Units
ReflectBenchmark.callMethod                       avgt    5   0.422 ± 0.015  ms/op
ReflectBenchmark.callReflectMethod                avgt    5  10.533 ± 0.719  ms/op
ReflectBenchmark.callReflectMethodAccessiblFalse  avgt    5   0.844 ± 0.021  ms/op
ReflectBenchmark.callReflectMethodAccessiblTrue   avgt    5   0.687 ± 0.023  ms/op

Benchmark result is saved to benchmark_reflect1651645846420.json
